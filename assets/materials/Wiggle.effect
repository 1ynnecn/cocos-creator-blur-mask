%{
	techniques: [
		{
			passes: [
				{
					vert: vs
					frag: fs
					cullMode: none
					blend: true
				}
			]
			layer: 0
		}
	]
	properties: {
		texture: {
			type: sampler2D
			value: null
		}
		alphaThreshold: {
			type: number
			value: 0.5
		},
		time: {
			type: number,
			value: 0
		}
	}
%}

%% vs {

	precision highp float;

	uniform mat4 cc_matViewProj;

	#if _USE_MODEL
		uniform mat4 cc_matWorld;
	#endif

	attribute vec3 a_position;
	attribute lowp vec4 a_color;

	#if USE_TEXTURE
		attribute mediump vec2 a_uv0;
		varying mediump vec2 v_uv0;
	#endif

	varying lowp vec4 v_color;

	void main () {
		mat4 mvp;
		
		#if _USE_MODEL
			mvp = cc_matViewProj * cc_matWorld;
		#else
			mvp = cc_matViewProj;
		#endif

		#if USE_TEXTURE
			v_uv0 = a_uv0;
		#endif

		v_color = a_color;

		gl_Position = mvp * vec4(a_position, 1);
	}

}

%% fs {

	precision highp float;

	uniform float time;
	#if USE_TEXTURE
		uniform sampler2D texture;
		varying mediump vec2 v_uv0;
	#endif

	#include <alpha-test>

	varying lowp vec4 v_color;

	void main () {
		vec4 color = v_color;

		#if USE_TEXTURE
			vec2 uv = v_uv0;
			uv -= 0.1;
			uv *= 1.25;
			uv.y += sin(uv.x * 16.0 + time * 2.0) * 0.05;
			color *= texture2D(texture, uv);

			if (uv.x < 0.0 || uv.x > 1.0) {
				color.a = 0.0;
			} else if (uv.y < 0.01) {
				color.a = smoothstep(0.01, 0.0, abs(0.01 - uv.y));
			} else if (uv.y > 0.99) {
				color.a = smoothstep(0.01, 0.0, abs(0.01 + uv.y - 1.0));
			}
			
			#if _USE_ETC1_TEXTURE
				color.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
			#endif
		#endif

		ALPHA_TEST(color);

		gl_FragColor = color;
	}

}
