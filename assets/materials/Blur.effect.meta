{
  "ver": "1.0.14",
  "uuid": "3eaafe6d-187a-4175-9669-7b03d92d4d6d",
  "compiledShaders": [
    {
      "vert": "\n#define _IS_VERT_SHADER 1\n\nprecision highp float;\n\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute mediump vec2 a_uv0;\nvarying mediump vec2 v_uv0;\n\nvoid main () {\n  gl_Position = cc_matViewProj * vec4(a_position, 1);\n  v_uv0 = a_uv0;\n}\n\n\n",
      "frag": "\n#define _IS_FRAG_SHADER 1\n\n\tprecision highp float;\n\n\tuniform sampler2D texture;\n    varying mediump vec2 v_uv0;\n\n    vec4 draw(vec2 uv) {\n        return texture2D(texture, uv).rgba; \n    }\n\n    float grid(float var, float size) {\n        return floor(var*size)/size;\n    }\n\n    float rand(vec2 co){\n        return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n    }\n\n\tvec4 dim(vec4 col, float factor){\n\t\treturn vec4(col.r * factor, col.g * factor, col.b * factor, col.a);\n\t}\n\n    void mainImage( out vec4 fragColor, in vec2 uv0 )\n    {\n        vec2 uv = uv0.xy;\n\t\tfloat bluramount = 0.04;\n        vec4 blurred_image = vec4(0.);\n        #define repeats 16.\n        for (float i = 0.; i < repeats; i++) { \n            vec2 q = vec2(cos(degrees((i/repeats)*360.)),sin(degrees((i/repeats)*360.))) * (rand(vec2(i,uv.x+uv.y))+bluramount); \n            vec2 uv2 = uv+(q*bluramount);\n            blurred_image += draw(uv2)/2.;\n            q = vec2(cos(degrees((i/repeats)*360.)),sin(degrees((i/repeats)*360.))) * (rand(vec2(i+2.,uv.x+uv.y+24.))+bluramount); \n            uv2 = uv+(q*bluramount);\n            blurred_image += draw(uv2)/2.;\n        }\n        blurred_image /= repeats;\n\t\tblurred_image = dim(blurred_image, 0.5);\n        fragColor = vec4(blurred_image);\n    }\n\n    void main()\n    {\n        mainImage(gl_FragColor, v_uv0.xy);\n    }\n\n\n"
    }
  ],
  "subMetas": {}
}